@inproceedings{10.1145/3149572.3149584,
address = {New York, NY, USA},
author = {Odeh, Yousra},
booktitle = {Proceedings of the 9th International Conference on Information Management and Engineering},
doi = {10.1145/3149572.3149584},
isbn = {9781450353373},
keywords = {BPMN,Business Process Management,Business Process Modelling,Engineering Software Systems,Requirements Engineering},
pages = {11--16},
publisher = {Association for Computing Machinery},
series = {ICIME 2017},
title = {{BPMN in Engineering Software Requirements: An Introductory Brief Guide}},
url = {https://doi.org/10.1145/3149572.3149584},
year = {2017}
}
@inproceedings{7320421,
author = {W{\"{u}}est, D and Seyff, N and Glinz, M},
booktitle = {2015 IEEE 23rd International Requirements Engineering Conference (RE)},
pages = {186--195},
title = {{Sketching and notation creation with FlexiSketch Team: Evaluating a new means for collaborative requirements elicitation}},
year = {2015}
}
@inproceedings{8049166,
author = {Spoletini, P and Ferrari, A},
booktitle = {2017 IEEE 25th International Requirements Engineering Conference (RE)},
pages = {476--477},
title = {{Requirements Elicitation: A Look at the Future Through the Lenses of the Past}},
year = {2017}
}
@inproceedings{8051340,
author = {Rafiq, U and Bajwa, S S and Wang, X and Lunesu, I},
booktitle = {2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)},
pages = {141--144},
title = {{Requirements Elicitation Techniques Applied in Software Startups}},
year = {2017}
}
@inproceedings{10.1145/3305160.3305195,
address = {New York, NY, USA},
author = {Sabariah, Mira Kania and Santosa, Paulus Insap and Ferdiana, Ridi},
booktitle = {Proceedings of the 2nd International Conference on Software Engineering and Information Management},
doi = {10.1145/3305160.3305195},
isbn = {9781450366427},
keywords = {Agile Method,Requirements Engineering,Requirements elicitation,child learning application,framework,usability},
pages = {129--133},
publisher = {Association for Computing Machinery},
series = {ICSIM 2019},
title = {{Requirement Elicitation Framework for Child Learning Application - A Research Plan}},
url = {https://doi.org/10.1145/3305160.3305195},
year = {2019}
}
@inproceedings{10.1145/2976767.2976807,
address = {New York, NY, USA},
author = {Golra, Fahad R and Beugnard, Antoine and Dagnat, Fabien and Guerin, Sylvain and Guychard, Christophe},
booktitle = {Proceedings of the ACM/IEEE 19th International Conference on Model Driven Engineering Languages and Systems},
doi = {10.1145/2976767.2976807},
isbn = {9781450343213},
keywords = {agile methods,domain specific modeling,free modeling,graphical DSML,lessons learnt},
pages = {24--34},
publisher = {Association for Computing Machinery},
series = {MODELS '16},
title = {{Using Free Modeling as an Agile Method for Developing Domain Specific Modeling Languages}},
url = {https://doi.org/10.1145/2976767.2976807},
year = {2016}
}
@article{9044788,
author = {Al-Alshaikh, H A and Mirza, A A and Alsalamah, H A},
journal = {IEEE Access},
pages = {60801--60810},
title = {{Extended Rationale-Based Model for Tacit Knowledge Elicitation in Requirements Elicitation Context}},
volume = {8},
year = {2020}
}
@article{SAFWAT2015442,
abstract = {According to the growing evolution in complex systems and their integrations, Internet of things, communication, massive information flows and big data, a new type of systems has been raised to software engineers known as Ultra Large Scale (ULS) Systems. Hence, it requires dramatic change in all aspects of “Software Engineering” practices and their artifacts due to its unique characteristics. Attendance of all software development members is impossible to meet in regular way and face-to-face, especially stakeholders from different national and organizational cultures. In addition, huge amount of data stored, number of integrations among software components and number of hardware elements. Those obstacles constrict design, development, testing, evolution, assessment and implementation phases of current software development methods. In this respect, ULS system that's considered as a system of systems, has gained considerable reflections on system development activities, as the scale is incomparable to the traditional systems since there are thousands of different stakeholders are involved in developing software, were each of them has different interests, complex and changing needs beside there are already new services are being integrated simultaneously to the current running ULS systems. The scale of ULS systems makes a lot of challenges for Requirements Engineers (RE). As a result, the requirements engineering experts are working on some automatic tools to support requirement engineering activities to overcome many challenges. This paper points to the limitations of the current RE practices for the challenges forced by ULS nature, and focus on the contributions of several approaches to overcome these difficulties in order to tackle unsolved areas of these solutions. As a result, the current approaches for ULS miss some RE essential practices related to find vital dependent requirements, and are not capable to measure the changes impact on ULS systems or other integrated legacy systems, in addition the requirements validation are somehow depended on the user ratings without solid approval from the stakeholders.},
annote = {International Conference on Communications, management, and Information technology (ICCMIT'2015)},
author = {Safwat, Ahmed and Senousy, M B},
doi = {https://doi.org/10.1016/j.procs.2015.09.116},
issn = {1877-0509},
journal = {Procedia Computer Science},
keywords = {Requirements Engineering,ULS,ULS Challenges},
pages = {442--449},
title = {{Addressing Challenges of Ultra Large Scale System on Requirements Engineering}},
url = {http://www.sciencedirect.com/science/article/pii/S1877050915029464},
volume = {65},
year = {2015}
}
@inproceedings{7562976,
author = {Hussain, Z M and Sumari, P},
booktitle = {2016 International Conference on Electronics, Information, and Communications (ICEIC)},
pages = {1--4},
title = {{WERT technique in requirements elicitation for web applications}},
year = {2016}
}
@inproceedings{10.1145/3364641.3364656,
address = {New York, NY, USA},
author = {Sousa, Amanda and Uch{\^{o}}a, Anderson and Fernandes, Eduardo and Bezerra, Carla I M and Monteiro, Jos{\'{e}} Maria and Andrade, Rossana M C},
booktitle = {Proceedings of the XVIII Brazilian Symposium on Software Quality},
doi = {10.1145/3364641.3364656},
isbn = {9781450372824},
keywords = {Dynamic Software Product Lines,Requirements Engineering},
pages = {129--138},
publisher = {Association for Computing Machinery},
series = {SBQS'19},
title = {{REM4DSPL: A Requirements Engineering Method for Dynamic Software Product Lines}},
url = {https://doi.org/10.1145/3364641.3364656},
year = {2019}
}
@inproceedings{10.1145/2729094.2742604,
address = {New York, NY, USA},
author = {Kurkovsky, Stan},
booktitle = {Proceedings of the 2015 ACM Conference on Innovation and Technology in Computer Science Education},
doi = {10.1145/2729094.2742604},
isbn = {9781450334402},
keywords = {LEGO serious play,case studies,software engineering},
pages = {213--218},
publisher = {Association for Computing Machinery},
series = {ITiCSE '15},
title = {{Teaching Software Engineering with LEGO Serious Play}},
url = {https://doi.org/10.1145/2729094.2742604},
year = {2015}
}
@article{10.1145/2732155,
address = {New York, NY, USA},
author = {Bruegge, Bernd and Krusche, Stephan and Alperowitz, Lukas},
doi = {10.1145/2732155},
journal = {ACM Trans. Comput. Educ.},
keywords = {Agile methods,Scrum,Unified Process,communication models,continuous delivery,continuous integration,executable prototypes,feedback,informal modeling,prototyping,release management,scenario-based design,user involvement,version control system},
number = {4},
publisher = {Association for Computing Machinery},
title = {{Software Engineering Project Courses with Industrial Clients}},
url = {https://doi.org/10.1145/2732155},
volume = {15},
year = {2015}
}
@inproceedings{7359019,
author = {Suranto, B},
booktitle = {2015 International Symposium on Technology Management and Emerging Technologies (ISTMET)},
pages = {148--153},
title = {{Software prototypes: Enhancing the quality of requirements engineering process}},
year = {2015}
}
@incollection{DIMITRAKOPOULOS202043,
abstract = {This chapter briefly reviews requirements engineering and discusses how activity theory can be used as potential approach for user requirements for intelligent transport system.},
author = {Dimitrakopoulos, George and Uden, Lorna and Varlamis, Iraklis},
booktitle = {The Future of Intelligent Transport Systems},
doi = {https://doi.org/10.1016/B978-0-12-818281-9.00004-8},
editor = {Dimitrakopoulos, George and Uden, Lorna and Varlamis, Iraklis},
isbn = {978-0-12-818281-9},
keywords = {activity,collaboration,contextual,dynamics,elicitation,requirements engineering,social,theory},
pages = {43--62},
publisher = {Elsevier},
title = {{Chapter 4 - User requirements and preferences for ITS}},
url = {http://www.sciencedirect.com/science/article/pii/B9780128182819000048},
year = {2020}
}
@article{MELEGATI201992,
abstract = {Context
Over the past 20 years, software startups have created many products that have changed human life. Since these companies are creating brand-new products or services, requirements are difficult to gather and highly volatile. Although scientific interest in software development in this context has increased, the studies on requirements engineering in software startups are still scarce and mostly focused on elicitation activities.
Objective
This study overcomes this gap by answering how requirements engineering practices are performed in this context.
Method
We conducted a grounded theory study based on 17 interviews with software startups practitioners.
Results
We constructed a model to show that software startups do not follow a single set of practices but, instead, build a custom process, changed throughout the development of the company, combining different practices according to a set of influences (Founders, Software Development Manager, Developers, Market, Business Model and Startup Ecosystem).
Conclusion
Our findings show that requirements engineering activities in software startups are similar to those in agile teams, but some steps vary as a consequence of the lack of an accessible customer.},
author = {Melegati, Jorge and Goldman, Alfredo and Kon, Fabio and Wang, Xiaofeng},
doi = {https://doi.org/10.1016/j.infsof.2019.02.001},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Customer development,Empirical software engineering,Product validation,Requirements engineering,Software startups},
pages = {92--107},
title = {{A model of requirements engineering in software startups}},
url = {http://www.sciencedirect.com/science/article/pii/S095058491930028X},
volume = {109},
year = {2019}
}
@article{GHOZALI2019274,
abstract = {This paper presents a systematic literature review of agile software development at decision making method for requirement engineering. Presently, agile software development method is operated to cope with requirements that changes dynamically. This study seeks to find out and discuss what types of method that have been exploited for decision making on managing feasible requirements and challenges of decision making in agile software development. Papers reviewed in this study are published from 2017 to present. Resulting 8 papers that have been identified of presenting decision making methods. Using these papers, 11 methods and 7 challenges of decision making identified. This study contributes a review of requirement management and engineering by providing decision making methods on agile software development and the challenges of decision making for requirement engineering.},
annote = {The 4th International Conference on Computer Science and Computational Intelligence (ICCSCI 2019) : Enabling Collaboration to Escalate Impact of Research Results for Society},
author = {Ghozali, Reginald Putra and Saputra, Herry and Nuriawan, M Apriadin and Suharjito and Utama, Ditdit Nugeraha and Nugroho, Ariadi},
doi = {https://doi.org/10.1016/j.procs.2019.08.167},
issn = {1877-0509},
journal = {Procedia Computer Science},
keywords = {Agile Software Development,Decision Making,Requirement Engineering,Systematic Literature Review},
pages = {274--281},
title = {{Systematic Literature Review on Decision-Making of Requirement Engineering from Agile Software Development}},
url = {http://www.sciencedirect.com/science/article/pii/S1877050919310853},
volume = {157},
year = {2019}
}
@article{8434145,
author = {Pacheco, C and Garc{\'{i}}a, I and Reyes, M},
journal = {IET Software},
number = {4},
pages = {365--378},
title = {{Requirements elicitation techniques: a systematic literature review based on the maturity of the techniques}},
volume = {12},
year = {2018}
}
@article{8513829,
author = {Dar, H and Lali, M I and Ashraf, H and Ramzan, M and Amjad, T and Shahzad, B},
journal = {IEEE Access},
pages = {63859--63867},
title = {{A Systematic Study on Software Requirements Elicitation Techniques and its Challenges in Mobile Application Development}},
volume = {6},
year = {2018}
}
@inproceedings{7407731,
author = {Sultan, M and Miranskyy, A},
booktitle = {2015 IEEE Fifth International Workshop on Requirements Patterns (RePa)},
pages = {1--8},
title = {{Ordering interrogative questions for effective requirements engineering: The W6H pattern}},
year = {2015}
}
@article{LINDOERFER2017147,
abstract = {Introduction
Patient registries are instrumental for medical research. Often their structures are complex and their implementations use composite software systems to meet the wide spectrum of challenges. Commercial and open-source systems are available for registry implementation, but many research groups develop their own systems. Methodological approaches in the selection of software as well as the construction of proprietary systems are needed. We propose an evidence-based checklist, summarizing essential items for patient registry software systems (CIPROS), to accelerate the requirements engineering process.
Methods
Requirements engineering activities for software systems follow traditional software requirements elicitation methods, general software requirements specification (SRS) templates, and standards. We performed a multistep procedure to develop a specific evidence-based CIPROS checklist: (1) A systematic literature review to build a comprehensive collection of technical concepts, (2) a qualitative content analysis to define a catalogue of relevant criteria, and (3) a checklist to construct a minimal appraisal standard.
Results
CIPROS is based on 64 publications and covers twelve sections with a total of 72 items. CIPROS also defines software requirements. Comparing CIPROS with traditional software requirements elicitation methods, SRS templates and standards show a broad consensus but differences in issues regarding registry-specific aspects.
Discussion
Using an evidence-based approach to requirements engineering for registry software adds aspects to the traditional methods and accelerates the software engineering process for registry software. The method we used to construct CIPROS serves as a potential template for creating evidence-based checklists in other fields.
Conclusion
The CIPROS list supports developers in assessing requirements for existing systems and formulating requirements for their own systems, while strengthening the reporting of patient registry software system descriptions. It may be a first step to create standards for patient registry software system assessments.},
author = {Lindoerfer, Doris and Mansmann, Ulrich},
doi = {https://doi.org/10.1016/j.jbi.2017.05.013},
issn = {1532-0464},
journal = {Journal of Biomedical Informatics},
keywords = {Checklist,Evidence-based requirements engineering,Patient registry software system,Technical requirements},
pages = {147--153},
title = {{Enhancing requirements engineering for patient registry software systems with evidence-based components}},
url = {http://www.sciencedirect.com/science/article/pii/S1532046417301090},
volume = {71},
year = {2017}
}
@inproceedings{8166689,
author = {Iacob, C and Faily, S},
booktitle = {2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE T)},
pages = {107--111},
title = {{Using Extreme Characters to Teach Requirements Engineering}},
year = {2017}
}
@inproceedings{10.1145/3301326.3301360,
address = {New York, NY, USA},
author = {Lim, Tek-Yong and Chua, Fang-Fang and Tajuddin, Bushra Binti},
booktitle = {Proceedings of the 2018 VII International Conference on Network, Communication and Computing},
doi = {10.1145/3301326.3301360},
isbn = {9781450365536},
keywords = {Elicitation Techniques,Internet of Things,Systematic Review},
pages = {182--188},
publisher = {Association for Computing Machinery},
series = {ICNCC 2018},
title = {{Elicitation Techniques for Internet of Things Applications Requirements: A Systematic Review}},
url = {https://doi.org/10.1145/3301326.3301360},
year = {2018}
}
@article{TRIPATHI2018130,
abstract = {Context: Software startups aim to develop innovative products, grow rapidly, and thus become important in the development of economy and jobs. Requirements engineering (RE) is a key process area in software development, but its effects on software startups are unclear. Objective: The main objective of this study was to explore how RE (elicitation, documentation, prioritization and validation) is used in software startups. Method: A multi-vocal literature review (MLR) was used to find scientific and gray literature. In addition, a case survey was employed to gather empirical data to reach this study's objective. Results: In the MLR, 36 primary articles were selected out of 28,643 articles. In the case survey, 80 respondents provided information about software startup cases across the globe. Data analysis revealed that during RE processes, internal sources (e.g., for source), analyses of similar products (e.g., elicitation), uses of informal notes (e.g., for documentation), values to customers, products and stakeholders (e.g., for prioritization) and internal reviews/prototypes (e.g., for validation) were the most used techniques. Conclusion: After an analysis of primary literature, it was concluded that research on this topic is still in early stages and more systematic research is needed. Furthermore, few topics were suggested for future research.},
author = {Tripathi, Nirnaya and Klotins, Eriks and Prikladnicki, Rafael and Oivo, Markku and Pompermaier, Leandro Bento and Kudakacheril, Arun Sojan and Unterkalmsteiner, Michael and Liukkunen, Kari and Gorschek, Tony},
doi = {https://doi.org/10.1016/j.jss.2018.08.059},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {Case survey,Multi-vocal literature review,Requirements engineering,Software startups},
pages = {130--151},
title = {{An anatomy of requirements engineering in software startups using multi-vocal literature and case survey}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121218301729},
volume = {146},
year = {2018}
}
@article{RIBEIRO2020102472,
abstract = {Context and motivation
All the research in methods and tools for avoiding, detecting, and removing ambiguities in requirements specifications assumes that doing so is necessary and that the methods and tools for doing so are worth the effort to use them. Each of two attempts by de Bruijn et al. and Philippo et al. to test these assumptions empirically with a case study examined a random sampling of the ambiguities in the requirements specification for already constructed software. Each study concluded that ambiguities in the examined requirements specification did not result in any serious defects in the downstream development and seem to have been resolved through the normal multiple inspections and discussions that characterize a serious requirements engineering process.
Question/problem
However, because each study examined only a small random sampling of the many ambiguities in its specification, it may have missed the rare ambiguity that causes a serious defect in the constructed software. Moreover, as a case study, its results cannot be generalized. So the unanswered questions are: (1) “How prevalent are ambiguities that cause defects?” and (2) “What kinds of defects do these ambiguities cause?”
Principal idea/Goal
The research reported in this paper tried hard to falsify de Bruijn's and Philippo's result in three different case studies, each with a requirements specification and already developed software. Each study used a purposive sampling of the ambiguities in its requirements specification to find those ambiguities that are least likely to have been discussed and resolved during the inspections and discussions about the specifications in an attempt to find undetected ambiguities that caused or can cause major defects in the implemented software. The purposive sampling was to identify types of ambiguity, called persistent ambiguities of which many people are not aware; which, therefore, will not come up in any of the discussions about the requirements; and which will persist into the implementation to cause defects. After obtaining the persistent ambiguities in the project's requirements specification, we asked the project's chief requirements engineer if any of them caused or can cause serious defects in the project's software.
Conclusion/Contribution
For the three projects, none of the sampled ambiguities reviewed by each chief requirements engineer caused expensive damage because all of the project's requirements engineers seem to have subconsciously disambiguated the ambiguities in the same way. The first main conclusion is that persistent ambiguities remain undetected during requirements engineering and the subsequent development. The second main conclusion is that a serious requirements engineering process is sufficient to cause all project stakeholders to disambiguate, consciously or not, all ambiguities, persistent or not, in a requirements specification the same way; thus, ambiguities, while present in the specification, do not cause defects in the downstream software. The third main conclusion is that the identification of persistent ambiguities in a requirements specification is potentially an effective and efficient strategy for minimizing damage caused by ambiguity precisely because of its focus on ambiguities that remain undetected due to lack of awareness. Further study is necessary to determine what factors are involved in persistent ambiguity and its prevalence, as well as its potential impacts.},
author = {Ribeiro, Cristina and Berry, Daniel},
doi = {https://doi.org/10.1016/j.scico.2020.102472},
issn = {0167-6423},
journal = {Science of Computer Programming},
keywords = {Ambiguity inspection,Case study,Purposive sampling,Random sampling,Requirements engineering discussions},
pages = {102472},
title = {{The prevalence and severity of persistent ambiguity in software requirements specifications: Is a special effort needed to find them?}},
url = {http://www.sciencedirect.com/science/article/pii/S0167642320300824},
volume = {195},
year = {2020}
}
@inproceedings{7552014,
author = {Atukorala, N L and Chang, C K and Oyama, K},
booktitle = {2016 IEEE 40th Annual Computer Software and Applications Conference (COMPSAC)},
pages = {233--238},
title = {{Situation-Oriented Requirements Elicitation}},
volume = {1},
year = {2016}
}
@inproceedings{10.1145/3233824.3233865,
address = {New York, NY, USA},
author = {Losada, Bego{\~{n}}a},
booktitle = {Proceedings of the XIX International Conference on Human Computer Interaction},
doi = {10.1145/3233824.3233865},
isbn = {9781450364911},
keywords = {Agile development,human-computer interaction,software engineering,user-centered design},
publisher = {Association for Computing Machinery},
series = {Interacci{\'{o}}n 2018},
title = {{Flexible Requirement Development through User Objectives in an Agile-UCD Hybrid Approach}},
url = {https://doi.org/10.1145/3233824.3233865},
year = {2018}
}
@inproceedings{10.1145/2737856.2737886,
address = {New York, NY, USA},
author = {Hasan, M Mahmudul},
booktitle = {Proceedings of the Seventh International Conference on Information and Communication Technologies and Development},
doi = {10.1145/2737856.2737886},
isbn = {9781450331630},
keywords = {ICTD,information and communication technologies and de,requirements elicitation approaches,system development requirements,systematic literature review},
publisher = {Association for Computing Machinery},
series = {ICTD '15},
title = {{ICTD Systems Development: Analysis of Requirements Elicitation Approaches}},
url = {https://doi.org/10.1145/2737856.2737886},
year = {2015}
}
@inproceedings{8992638,
author = {Zhi, Q and Zhou, Z and Morisaki, S and Yamamoto, S},
booktitle = {2019 8th International Congress on Advanced Applied Informatics (IIAI-AAI)},
pages = {847--852},
title = {{An Approach for Requirements Elicitation using Goal, Question, and Answer}},
year = {2019}
}
@article{LI2018108,
abstract = {In order to make a software project succeed, it is necessary to determine the requirements for systems and to document them in a suitable manner. Many ways for requirements elicitation have been discussed. One way is to gather requirements with crowdsourcing methods, which has been discussed for years and is called crowdsourcing requirements engineering. User requests forums in open source communities, where users can propose their expected features of a software product, are common examples of platforms for gathering requirements from the crowd. Requirements collected from these platforms are often informal text descriptions and we name them user requests. In order to transform user requests into structured software requirements, it is better to know the class of requirements that each request belongs to so that each request can be rewritten according to corresponding requirement templates. In this paper, we propose an effective classification methodology by employing both project-specific and non-project-specific keywords and machine learning algorithms. The proposed strategy does well in achieving high classification accuracy by using keywords as features, reducing considerable manual efforts in building machine learning based classifiers, and having stable performance in finding minority classes no matter how few instances they have.},
author = {Li, Chuanyi and Huang, Liguo and Ge, Jidong and Luo, Bin and Ng, Vincent},
doi = {https://doi.org/10.1016/j.jss.2017.12.028},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {Crowdsourcing requirements engineering,Machine learning,Natural language processing,Software requirements classification},
pages = {108--123},
title = {{Automatically classifying user requests in crowdsourcing requirements engineering}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121217303096},
volume = {138},
year = {2018}
}
@article{TRIPATHI201977,
abstract = {Context
Software startups develop innovative products through which they scale their business rapidly, and thus, provide value to the economy, including job generation. However, most startups fail within two years of their launch because of a poor problem-solution fit and negligence of the learning process during minimum viable product (MVP) development. An ideal startup ecosystem can assist in MVP development by providing the necessary entrepreneurial education and technical skills to founding team members for identifying problem-solution fit for their product idea, allowing them to find the right product-market fit. However, existing knowledge on the effect of the startup ecosystem elements on the MVP development is limited.
Objective
The empirical study presented in this article aims to identify the effect of the six ecosystem elements (entrepreneurs, technology, market, support factors, finance, and human capital) on MVP development.
Method
We conducted a study with 13 software startups and five supporting organizations (accelerators, incubator, co-working space, and investment firm) in the startup ecosystem of the city of Oulu in Finland. Data were collected through semi-structured interviews, observation, and materials.
Results
The study results showed that internal sources are most common for identifying requirements for the product idea for MVP development. The findings indicate that supporting factors, such as incubators and accelerators, can influence MVP development by providing young founders with the necessary entrepreneurship skills and education needed to create the right product-market fit.
Conclusions
We conclude from this study of a regional startup ecosystem that the MVP development process is most affected by founding team members' experiences and skill sets and by advanced technologies. Furthermore, a constructive startup ecosystem around software startups can boost up the creation of an effective MVP to test product ideas and find a product-market fit.},
author = {Tripathi, Nirnaya and Oivo, Markku and Liukkunen, Kari and Markkula, Jouni},
doi = {https://doi.org/10.1016/j.infsof.2019.06.008},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Empirical study,Minimum viable product,Product idea,Prototype,Software startup,Startup ecosystem},
pages = {77--91},
title = {{Startup ecosystem effect on minimum viable product development in software startups}},
url = {http://www.sciencedirect.com/science/article/pii/S0950584919301417},
volume = {114},
year = {2019}
}
@article{7307191,
author = {Aranda, A M and Dieste, O and Juristo, N},
journal = {IEEE Transactions on Software Engineering},
number = {5},
pages = {427--451},
title = {{Effect of Domain Knowledge on Elicitation Effectiveness: An Internally Replicated Controlled Experiment}},
volume = {42},
year = {2016}
}
@article{BJARNASON201661,
abstract = {Context
It is an enigma that agile projects can succeed ‘without requirements' when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases.
Objective
We have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies.
Method
We performed an iterative case study at three companies and collected data through 14 interviews and two focus groups.
Results
The use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements practice, namely de facto, behaviour-driven, story-test driven, stand-alone strict and stand-alone manual for which the application of the practice varies concerning the time frame of requirements documentation, the requirements format, the extent to which the test cases are a machine executable specification and the use of tools which provide specific support for the practice of using test cases as requirements.
Conclusions
The findings provide empirical insight into how agile development projects manage and communicate requirements. The identified variants of the practice of using test cases as requirements can be used to perform in-depth investigations into agile requirements engineering. Practitioners can use the provided recommendations as a guide in designing and improving their agile requirements practices based on project characteristics such as number of stakeholders and rate of change.},
author = {Bjarnason, Elizabeth and Unterkalmsteiner, Michael and Borg, Markus and Engstr{\"{o}}m, Emelie},
doi = {https://doi.org/10.1016/j.infsof.2016.03.008},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Acceptance test,Agile development,Behaviour-driven development,Case study,Empirical software engineering,Requirements,Test-driven development,Test-first development,Testing},
pages = {61--79},
title = {{A multi-case study of agile requirements engineering and the use of test cases as requirements}},
url = {http://www.sciencedirect.com/science/article/pii/S0950584916300544},
volume = {77},
year = {2016}
}
@article{BJARNASON201661,
abstract = {Context
It is an enigma that agile projects can succeed ‘without requirements' when weak requirements engineering is a known cause for project failures. While agile development projects often manage well without extensive requirements test cases are commonly viewed as requirements and detailed requirements are documented as test cases.
Objective
We have investigated this agile practice of using test cases as requirements to understand how test cases can support the main requirements activities, and how this practice varies.
Method
We performed an iterative case study at three companies and collected data through 14 interviews and two focus groups.
Results
The use of test cases as requirements poses both benefits and challenges when eliciting, validating, verifying, and managing requirements, and when used as a documented agreement. We have identified five variants of the test-cases-as-requirements practice, namely de facto, behaviour-driven, story-test driven, stand-alone strict and stand-alone manual for which the application of the practice varies concerning the time frame of requirements documentation, the requirements format, the extent to which the test cases are a machine executable specification and the use of tools which provide specific support for the practice of using test cases as requirements.
Conclusions
The findings provide empirical insight into how agile development projects manage and communicate requirements. The identified variants of the practice of using test cases as requirements can be used to perform in-depth investigations into agile requirements engineering. Practitioners can use the provided recommendations as a guide in designing and improving their agile requirements practices based on project characteristics such as number of stakeholders and rate of change.},
author = {Bjarnason, Elizabeth and Unterkalmsteiner, Michael and Borg, Markus and Engstr{\"{o}}m, Emelie},
doi = {https://doi.org/10.1016/j.infsof.2016.03.008},
issn = {0950-5849},
journal = {Information and Software Technology},
keywords = {Acceptance test,Agile development,Behaviour-driven development,Case study,Empirical software engineering,Requirements,Test-driven development,Test-first development,Testing},
pages = {61--79},
title = {{A multi-case study of agile requirements engineering and the use of test cases as requirements}},
url = {http://www.sciencedirect.com/science/article/pii/S0950584916300544},
volume = {77},
year = {2016}
}
@article{MISHRA201849,
abstract = {In small-scale software development organizations, software engineers are beginning to realize the significance of adapting software development methods according to project conditions. There is a requirement to proliferate this know-how to other developers, who may be facing the same settings/context, so that they too can benefit from others' experiences. In this paper, the application of situational method engineering in requirements elicitation phase is investigated. A novel, simple and dynamic web-based tool, Situational Requirement Method System (SRMS), is developed which can aid in conception/formulation, repository, and elicitation/derivation of methods related with this stage. The proposed approach and tool are validated by distributing a questionnaire among software professionals working in large software companies, and making SRMS accessible to them. The results indicate that a majority of the participants finds SRMS useful and provides various suggestions to improve it.},
author = {Mishra, Deepti and Aydin, Se{\c{c}}il and Mishra, Alok and Ostrovska, Sofiya},
doi = {https://doi.org/10.1016/j.csi.2017.09.004},
issn = {0920-5489},
journal = {Computer Standards {\&} Interfaces},
keywords = {Knowledge management,Requirement elicitation,Requirement engineering,Situational method engineering},
pages = {49--61},
title = {{Knowledge management in requirement elicitation: Situational methods view}},
url = {http://www.sciencedirect.com/science/article/pii/S092054891630229X},
volume = {56},
year = {2018}
}
@inproceedings{7955848,
author = {Vijayan, J and Raju, G and Joseph, M},
booktitle = {2016 International Conference on Signal Processing, Communication, Power and Embedded System (SCOPES)},
pages = {340--344},
title = {{Collaborative requirements elicitation using elicitation tool for small projects}},
year = {2016}
}
@inproceedings{8491134,
author = {Bano, M and Bano, M and Zowghi, D and Ferrari, A and Spoletini, P and Donati, B},
booktitle = {2018 IEEE 26th International Requirements Engineering Conference (RE)},
pages = {182--193},
title = {{Learning from Mistakes: An Empirical Study of Elicitation Interviews Performed by Novices}},
year = {2018}
}
@article{REDDIVARI201941,
abstract = {Being able to quickly and accurately capture requirements is crucial when using agile methodologies. Requirements, to that end, are often captured in an as-needed and informal manner, with continuous stakeholder interaction. Techniques such as interviews, user stories, rapid feedback, and text mining are commonly used in the industry to gather such informal requirements, which are often congruent with the concept of ‘just-in-time' (JIT)—informally represented and continuously refined—requirements. Oral communication is an integral part of most of these techniques, and the loss or misinterpretation of verbally communicated requirements is a daunting problem. To address this issue, In this invited paper, we propose a novel framework to assist developers in capturing verbal requirements in complete manner. In particular, our framework automatically captures, transcribes, and mines verbal communication, which in turn produces a set of loosely formulated candidate requirements for further elaboration. We also conducted a survey among practitioners concerning requirements in agile methodologies and our framework. The results of this survey provide positive feedback on the prospects of the framework and also indicate the prevalence of JIT requirements in closed source agile projects. In addition, we proposed a new framework for visual exploration of JIT requirements and presented our JITREvisu prototype tool.},
author = {Reddivari, Sandeep and Bhowmik, Tanmay and Hollis, Corey},
doi = {https://doi.org/10.1016/j.jii.2018.06.001},
issn = {2452-414X},
journal = {Journal of Industrial Information Integration},
keywords = {Agile development,Audio to text transcription,Clustering,Just-in-time requirements,Requirements visualization,Text mining,Visual exploration},
pages = {41--49},
title = {{Automated support to capture verbal just-in-time requirements via audio mining and cluster-based visualization}},
url = {http://www.sciencedirect.com/science/article/pii/S2452414X17301012},
volume = {14},
year = {2019}
}
@inproceedings{10.1145/2970276.2970328,
address = {New York, NY, USA},
author = {Pescador, Ana and de Lara, Juan},
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
doi = {10.1145/2970276.2970328},
isbn = {9781450338455},
keywords = {Domain Analysis,Domain Specific Languages,Meta-Modelling Patterns,Model-Driven Engineering},
pages = {438--443},
publisher = {Association for Computing Machinery},
series = {ASE 2016},
title = {{DSL-Maps: From Requirements to Design of Domain-Specific Languages}},
url = {https://doi.org/10.1145/2970276.2970328},
year = {2016}
}
@inproceedings{10.1145/3350768.3352730,
address = {New York, NY, USA},
author = {Netto, Dorgival and Silva, Carla and Ara{\'{u}}jo, Jo{\~{a}}o},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
doi = {10.1145/3350768.3352730},
isbn = {9781450376518},
keywords = {Ambiguity,Legal Compliance,Requirements Engineering},
pages = {181--186},
publisher = {Association for Computing Machinery},
series = {SBES 2019},
title = {{Identifying How the Brazilian Software Industry Specifies Legal Requirements}},
url = {https://doi.org/10.1145/3350768.3352730},
year = {2019}
}
@article{SERNAM2017155,
abstract = {It is traditionally assumed that requirements specification, as a product of requirements engineering, has a high impact on the ensuing software development stages. Therefore, the knowledge management used to construct the requirements specification should be performed in a structured manner to discover, analyze and understand the data–information–knowledge chain, both tacit and explicit, that the interested parties possess. In this article, the results of a literature review are presented, seeking to answer the following questions: (1) What is the meaning of knowledge in requirements engineering? (2) What approaches are proposed to manage knowledge in requirements engineering? (3) Can the efficiency and the efficacy of knowledge management models be evidenced in requirements engineering? Thirty-six works were chosen for analysis out of a total 83 found in our search. The analysis showed that (1) knowledge has a central significance at this stage, but the authors have yet to agree on the best methods to impart and apply that knowledge; (2) no general framework has emerged as a validated approach to manage knowledge for requirements engineering; and (3) the evaluation marks for model efficiency and efficacy are low, consisting mostly of personal interpretations.},
author = {M.], Edgar [Serna and S.], Oscar [Bachiller and A.], Alexei [Serna},
doi = {https://doi.org/10.1016/j.ijinfomgt.2017.01.005},
issn = {0268-4012},
journal = {International Journal of Information Management},
keywords = {Knowledge management,Knowledge meaning,Requirements elicitation,Software engineering},
number = {3},
pages = {155--161},
title = {{Knowledge meaning and management in requirements engineering}},
url = {http://www.sciencedirect.com/science/article/pii/S0268401216306582},
volume = {37},
year = {2017}
}
@article{BABAR2015179,
abstract = {Software requirements engineering is a critical discipline in the software development life cycle. The major problem in software development is the selection and prioritization of the requirements in order to develop a system of high quality. This research analyzes the issues associated with existing software requirement prioritization techniques. One of the major issues in software requirement prioritization is that the existing techniques handle only toy projects or software projects with very few requirements. The current techniques are not suitable for the prioritization of a large number of requirements in projects where requirements may grow to the hundreds or even thousands. The research paper proposes an expert system, called the Priority Handler (PHandler), for requirement prioritization. PHandler is based on the value-based intelligent requirement prioritization technique, neural network and analytical hierarchical process in order to make the requirement prioritization process scalable. The back-propagation neural network is used to predict the value of a requirement in order to reduce the extent of expert biases and make the PHandler efficient. Moreover, the analytical hierarchy process is applied on prioritized groups of requirements in order to enhance the scalability of the requirement prioritization process.},
author = {Babar, Muhammad Imran and Ghazali, Masitah and Jawawi, Dayang N A and Shamsuddin, Siti Maryam and Ibrahim, Noraini},
doi = {https://doi.org/10.1016/j.knosys.2015.04.010},
issn = {0950-7051},
journal = {Knowledge-Based Systems},
keywords = {Artificial neural networks,Decision support,Expert systems,Hybrid model,Software requirement prioritization},
pages = {179--202},
title = {{PHandler: An expert system for a scalable software requirements prioritization process}},
url = {http://www.sciencedirect.com/science/article/pii/S0950705115001483},
volume = {84},
year = {2015}
}
@article{ALDAVE2019110396,
abstract = {Agile approaches tend to focus solely on scoping and simplicity rather than on problem solving and discovery. This hampers the development of innovative solutions. Additionally, little has been said about how to capture and represent the real user needs. To fill this gap, some authors argue in favor of the application of “Creative thinking” for requirements elicitation within agile software development. This synergy between creativeness and agility has arisen as a new means of bringing innovation and flexibility to increasingly demanding software. The aim of the present study is therefore to employ a systematic review to investigate the state-of-the-art of those approaches that leverage creativity in requirements elicitation within Agile Software Development, as well as the benefits, limitations and strength of evidence of these approaches. The review was carried out by following the guidelines proposed by Dr. Kitchenham. The search strategy identified 1451 studies, 17 of which were eventually classified as primary studies. The selected studies contained 13 different and unique proposals. These approaches provide evidence that enhanced creativity in requirements elicitation can be successfully implemented in real software projects. We specifically observed that projects related to user interface development, such as those for mobile or web applications, are good candidates for the use of these approaches. We have also found that agile methodologies such as Scrum, Extreme Programming or methodologies based on rapid modelling are preferred when introducing creativity into requirements elicitation. Despite this being a new research field, there is a mixture of techniques, tools and processes that have already been and are currently being successfully tested in industry. Finally, we have found that, although creativity is an important ingredient with which to bring about innovation, it is not always sufficient to generate new requirements because this needs to be followed by user engagement and a specific context in which proper conditions, such as flexibility, time or resources, have to be met.},
author = {Aldave, Ainhoa and Vara, Juan M and Granada, David and Marcos, Esperanza},
doi = {https://doi.org/10.1016/j.jss.2019.110396},
issn = {0164-1212},
journal = {Journal of Systems and Software},
keywords = {Agile methodologies,Creative thinking,Requirements elicitation,Software development,Software project management,Systematic review},
pages = {110396},
title = {{Leveraging creativity in requirements elicitation within agile software development: A systematic literature review}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121219301712},
volume = {157},
year = {2019}
}
@inproceedings{10.1109/ICSE-SEIP.2019.00041,
author = {Maalej, Walid and Nayebi, Maleknaz and Ruhe, Guenther},
booktitle = {Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Practice},
doi = {10.1109/ICSE-SEIP.2019.00041},
keywords = {data analytics,feature extraction,mining software repositories,requirements engineering,stakeholders},
pages = {289--290},
publisher = {IEEE Press},
series = {ICSE-SEIP '19},
title = {{Data-Driven Requirements Engineering: An Update}},
url = {https://doi.org/10.1109/ICSE-SEIP.2019.00041},
year = {2019}
}
@inproceedings{7765520,
author = {Karras, O and Kiesling, S and Schneider, K},
booktitle = {2016 IEEE 24th International Requirements Engineering Conference (RE)},
pages = {146--155},
title = {{Supporting Requirements Elicitation by Tool-Supported Video Analysis}},
year = {2016}
}
@inproceedings{10.1145/2851613.2851758,
address = {New York, NY, USA},
author = {Bombonatti, Denise and Gralha, Catarina and Moreira, Ana and Ara{\'{u}}jo, Jo{\~{a}}o and Goul{\~{a}}o, Miguel},
booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
doi = {10.1145/2851613.2851758},
isbn = {9781450337397},
keywords = {requirements engineering approaches,systematic literature review,usability},
pages = {1270--1275},
publisher = {Association for Computing Machinery},
series = {SAC '16},
title = {{Usability of Requirements Techniques: A Systematic Literature Review}},
url = {https://doi.org/10.1145/2851613.2851758},
year = {2016}
}
@article{10.1145/3145454,
address = {New York, NY, USA},
author = {Krusche, Stephan and Dzvonyar, Dora and Xu, Han and Bruegge, Bernd},
doi = {10.1145/3145454},
journal = {ACM Trans. Comput. Educ.},
keywords = {Agile methods,collaborative learning,scenario-based design,visionary scenarios},
number = {2},
publisher = {Association for Computing Machinery},
title = {{Software Theater—Teaching Demo-Oriented Prototyping}},
url = {https://doi.org/10.1145/3145454},
volume = {18},
year = {2018}
}

@article{m2,
  title={Metodolog{\'\i}a de revisi{\'o}n sistem{\'a}tica de literatura},
  author={Garc{\'\i}a-Pe{\~n}alvo, FJ},
  year={2019},
  publisher={Grupo GRIAL}
}


@article{m1,
  title={Proceso para la identificaci{\'o}n de requisitos de software de aplicaciones m{\'o}viles que apoyen la gesti{\'o}n de servicios ofrecidos al ciudadano},
  author={MORENO, Manuel A and GALVIS, Ernesto A and GOMEZ, Luis C}
}




